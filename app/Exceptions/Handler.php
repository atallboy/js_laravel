<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
use Modules\Common\Exceptions\ApiException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {

        if($e instanceof ApiException){
            $result = [
                'status'=>$e->getCode(),
                'message'=>$e->getMessage()
            ];
            return response()->json($result,500);
        }else if($e instanceof ValidationException){
            $result = [ 
                'status'=>400,
                'message'=>array_values($e->errors())[0][0]
            ];
            return response()->json($result,400);
        }

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

}
